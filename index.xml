<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yajie Yan on Yajie Yan</title>
    <link>/</link>
    <description>Recent content in Yajie Yan on Yajie Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 -0700</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Voxel Core: Computing Medial Axes in 3D</title>
      <link>/project/voxelcore/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 -0700</pubDate>
      
      <guid>/project/voxelcore/</guid>
      <description>

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;We present a novel algorithm for computing the medial axes of 3D shapes. We make the observation that the medial axis of a voxel shape can be simply yet faithfully approximated by the interior Voronoi diagram of the boundary vertices, which we call the voxel core. We further show that voxel cores can approximate the medial axes of any smooth shape with homotopy equivalence and geometric convergence. These insights motivate an algorithm that is simple, efficient, numerically stable, and equipped with theoretical guarantees. Compared with existing voxel-based methods, our method inherits their simplicity but is more scalable and can process significantly larger inputs. Compared with sampling-based methods that offer similar theoretical guarantees, our method produces visually comparable results but more robustly captures the topology of the input shape.&lt;/p&gt;

&lt;h2 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h2&gt;

&lt;p&gt;The input 3D shape to our algorithm can be a voxel representation (binarized volume), or a triangular mesh representing the surface of the shape. Then our algorithm generates the voxel core which approximates the medial axis of the shape. Both in theory and in practice, we are able to show voxel core captures the topology and is within provable proximity of the true medial axis of a voxel shape. Although for meshes such guarantees only hold theoretically, in practice we still observe a high success rate in delivering these promises. Below we show a flow chart that visualizes each step of our algorithm.&lt;/p&gt;

&lt;figure&gt;

&lt;img src=&#34;/img/vc-flowchart.png&#34; alt=&#34;flowchart of algorithm&#34; /&gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Figure 1. Breakdown of algorithm. Given a triangular mesh, we first convert it into a voxel shape, then extract the voxel core which is colored by the lambda measure, and finally output a pruned voxel core. The voxelization step is omitted if the input is already a voxel shape.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, we voxelize the input triangular mesh (a) to obtain a voxel shape (b). Of course this step is omitted if the input is already a voxel shape.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We then extract the voxel core by computing the Voronoi diagram of the boundary voxel vertices interior to the voxel shape (c). In the figure the voxel core is colored by the lambda measure using a heat color scheme, with blue being low and red being high.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally we output the subset of the voxel core whose lambda value is below the user provided threshold (d) as the medial axis of the input shape.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;generating-skeletons&#34;&gt;Generating skeletons&lt;/h2&gt;

&lt;p&gt;The output of this project, i.e. Voxel cores can be futher simplified using &lt;a href=&#34;/project/et/&#34; target=&#34;_blank&#34;&gt;Erosion Thickness&lt;/a&gt;. The output will be a skeleton featuring both curves and surfaces that capture tubular and planar regions of the shape.&lt;/p&gt;

&lt;h2 id=&#34;downloads&#34;&gt;Downloads&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paper: &lt;a href=&#34;/vc_sig18/voxelma.pdf&#34;&gt;&lt;code&gt;pdf (author version)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Supplementary: &lt;a href=&#34;/vc_sig18/voxelma_sup.pdf&#34;&gt;&lt;code&gt;pdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tool: &lt;a href=&#34;/vc_sig18/voxelcore.zip&#34;&gt;&lt;code&gt;exe&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;/project/voxelcore-readme/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We provide the executable which implements the method. Please see the &lt;a href=&#34;/project/voxelcore-readme/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt; for details about using the tool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Supplementary material: a gallery of significance measures and skeletons</title>
      <link>/et_gallery/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 -0700</pubDate>
      
      <guid>/et_gallery/</guid>
      <description>&lt;p&gt;This document compares significance measures (object angle, circumradius, MGF, ET) on 15 shapes before and after boundary perturbation. The first column for each shape visualizes the significance measure by heat color (higher values in red) and transparency (higher values are more opaque). The second column shows the portion of the medial axis whose significance values are higher than a threshold. Two skeletons (a curve-only skeleton and a curve-and-surface skeleton) computed using our method for each shape are shown in the last row.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-2.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-3.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-4.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-5.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-6.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-7.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-8.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-9.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-10.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-11.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-12.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-13.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-14.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-15.jpg&#34; /&gt;


&lt;/figure&gt;
&lt;figure&gt;

&lt;img src=&#34;/et_sig16/sup/et_sup2-16.jpg&#34; /&gt;


&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Erosion Thickness: Simplifying Medial Axes in 3D</title>
      <link>/project/et/</link>
      <pubDate>Wed, 09 May 2018 23:22:19 -0500</pubDate>
      
      <guid>/project/et/</guid>
      <description>

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While playing a fundamental role in shape understanding, the medial axis is known to be sensitive to small boundary perturbations. Methods for pruning the medial axis are usually guided by some measure of significance. The majority of significance measures over the medial axes of 3D shapes are locally defined and hence unable to capture the scale of features. We introduce a global significance measure that generalizes in 3D the classical Erosion Thickness (ET) measure over the medial axes of 2D shapes. We give precise definition of ET in 3D, analyze its properties, and present an efficient approximation algorithm with bounded error on a piecewise linear medial axis. Experiments showed that ET outperforms local measures in differentiating small boundary noise from prominent shape features, and it is significantly faster to compute than existing global measures. We demonstrate the utility of ET in extracting clean, shape-revealing and topology-preserving skeletons of 3D shapes.&lt;/p&gt;

&lt;figure&gt;

&lt;img src=&#34;/et_sig16/et_teaser.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Figure 1. The medial axis of a bumpy dolphin shape contains numerous noisy branches (left). Our measure properly highlights the important subset of the medial axis (middle). Guided by the measure, a skeleton is generated that features both surfaces and curves capturing planar and tubular parts of the shape.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;gallery&#34;&gt;Gallery&lt;/h2&gt;

&lt;figure&gt;

&lt;img src=&#34;/et_sig16/gallery.png&#34; /&gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Figure 2. Gallery of 12 shapes organized by columns. The surface, ET, curve-only skeleton and hybrid skeleton are shown for each shape by rows. See the supplementary material for complete results.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;downloads&#34;&gt;Downloads&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paper: &lt;a href=&#34;#&#34;&gt;&lt;code&gt;author version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Supplementary:
&lt;a href=&#34;/et_sig16/et_sup.pdf&#34;&gt;&lt;code&gt;proof&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;/et_gallery/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;gallery(html)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example meshes: &lt;a href=&#34;/et_sig16/data.zip&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tool:
&lt;a href=&#34;/et_sig16/et.v2.zip&#34;&gt;&lt;code&gt;exe&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;#&#34;&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Voxelcore Readme</title>
      <link>/project/voxelcore-readme/</link>
      <pubDate>Tue, 08 May 2018 19:10:35 -0500</pubDate>
      
      <guid>/project/voxelcore-readme/</guid>
      <description>

&lt;h2 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h2&gt;

&lt;hr /&gt;

&lt;figure&gt;

&lt;img src=&#34;/img/vc-pipeline.png&#34; alt=&#34;fig-pipeline&#34; /&gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Figure 1. Pipeline of generating medial axis using voxelcore program. Users first prepare their datasets into dense volumes or sparse volumes, and then run voxelcore to produce medial axes. Optionally the medial axes can be further simplified using another tightly related tool called Erosion Thickness. Please see its project page for details.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Usually the user is in pocession of a digital shape that&amp;rsquo;s either represented as a volume by a set of images, or as a surface by a triangular mesh. Below we explain how to convert these datasets into a dense volume (&lt;code&gt;.mrc&lt;/code&gt;) or a sparse signed octree (&lt;code&gt;.sog&lt;/code&gt;) respectively, both are acceptable input formats to our program&lt;/p&gt;

&lt;h2 id=&#34;preparing-input&#34;&gt;Preparing input&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;As shown in Figure 1, input to our program shall be prepared differently depending on the type of original dataset.&lt;/p&gt;

&lt;h3 id=&#34;from-image-stack-to-mrc&#34;&gt;From image stack to &lt;code&gt;.mrc&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If the user has a stack of images (e.g. png, tiff), there exists three approaches to convert that into a volume in format &lt;code&gt;.mrc&lt;/code&gt;, which can be input to our voxelcore program. A &lt;code&gt;.mrc&lt;/code&gt; file stores a 3D volume where each voxel has a density value. Voxelcore assumes that object voxels have values &amp;gt; 0, while background voxels &amp;lt;= 0.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interactive programs&lt;/strong&gt; Free-wares such as Paraview and Chimera can open stack of images in common formats (e.g. tiff, png, jpg), visualizing a volume dataset within the program. This voluem can be then saved as a &lt;code&gt;.mrc&lt;/code&gt; file. This approach is very easy to perform, but may not be suited for purpose of batch processing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command line utilities&lt;/strong&gt; One can easily find a handful command line tools online that process images into volume file. However to our knowledge, these utilities only accept certain image formats. For example the &lt;a href=&#34;http://bio3d.colorado.edu/imod/doc/program_listing.html#TOP&#34; target=&#34;_blank&#34;&gt;IMOD package&lt;/a&gt; offers a command line program called &lt;code&gt;tif2mrc&lt;/code&gt; that converts a stack of tiff images to a mrc file. The user would need to convert their images to tiff first to use this utility. This approach is easy to batch process any number of datasets, but no one utility can cover a wide range of formats.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scripts&lt;/strong&gt; The 3rd option is to take a bit self initiative to write some scripts to do the job. Though myriad scripting languages are out there, we had the best experience with python, as the vastly available modules help pull the work off more easily. For example, &lt;a href=&#34;https://pydicom.github.io/&#34; target=&#34;_blank&#34;&gt;pydicom&lt;/a&gt; can easily parse DICOM files, a powerful yet sophisticated medical image format. Then the content can be written to a &lt;code&gt;.mrc&lt;/code&gt; file using another python library, &lt;a href=&#34;https://github.com/ccpem/mrcfile&#34; target=&#34;_blank&#34;&gt;mrcfile&lt;/a&gt;. Similar library exists that parse other widly used image formats. These specialized python scripts can be further wrapped by a format dispatcher that can better automate the task. The advantage is apparently an automatic conversion tool suitable for batch processing a variety of formats the user wants to support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;from-mesh-to-sog&#34;&gt;From mesh to &lt;code&gt;.sog&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;On the other hand, users with a mesh representing the shape are suggested to convert it to a sparse signed octree in format &lt;code&gt;.sog&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Polymender&lt;/strong&gt; can be used to produce a SOG file from the given triangular mesh (route 2 in Figure 1) (see &lt;a href=&#34;http://www.cs.wustl.edu/~taoju/code/polymender.htm&#34; target=&#34;_blank&#34;&gt;Polymender&lt;/a&gt;, or &lt;a href=&#34;http://www.cs.wustl.edu/~taoju/code/PolyMender_1_7_1_exe.rar&#34; target=&#34;_blank&#34;&gt;download the program&lt;/a&gt; and see the readme.txt).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Voxelcore&lt;/strong&gt; program itself can produce a SOG file from a MRC file in mode &lt;code&gt;mrc2sog&lt;/code&gt;:
&lt;code&gt;voxelcore -md=mrc2sog -mrc=mrc_file_path -sog=sog_output_path&lt;/code&gt;
The original mrc can be deleted if the user has no other intention with it, since the sog file contains complete information about the volume.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;producing-medial-axis&#34;&gt;Producing medial axis&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Now the input is ready, our program can be called in the following format&lt;/p&gt;

&lt;p&gt;&lt;code&gt;voxelcore -md=validmode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The program runs in a few modes to help generate the medial axis of the input shape, and other relevant information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating medial axis from volume with&lt;/strong&gt; &lt;code&gt;-md=vol2ma&lt;/code&gt;. In this mode, the program will read in the specified volume file, and output the voxel core to approximate true medial axis. Complete information about this mode is listed below (can be printed by typing &lt;code&gt;voxelcore -md=vol2ma&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;voxelcore -md=vol2ma &amp;lt;in: volume fullpath. ext: .mrc/.sog&amp;gt; &amp;lt;out: MA fullpath. ext: .ply&amp;gt; [optional args]
optional:
    -tt (1 or more comma-sep lambda pruning thresholds. OPTIONAL.) type: string default: &amp;quot;0.04&amp;quot;
    -fullOrPruned (write full or prunned voxel core (0: pruned, 1: full, 2: both). OPTIONAL.) type: int32 default: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Generating voxel shape boundary with&lt;/strong&gt; &lt;code&gt;-md=vol2mesh&lt;/code&gt;. In this mode, the boundary of the voxel shape represented by a volume file is extracted as a .off mesh file. Special argument can be specified to only output a point cloud (without faces). Full information about this mode is as follows (can be printed by typing &lt;code&gt;voxelcore -md=vol2mesh&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;voxelcore -md=vol2mesh &amp;lt;input vol fullpath&amp;gt; &amp;lt;output mesh fullpath(w/o extension)&amp;gt; [optional args]
optional:
    -onlyBndryVts (only extract the vertices of the voxel boundary. OPTIONAL.) type: bool default: true
    -write2node (write voxel boundary vts to .node file in input file folder. OPTIONAL.) type: bool default: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Converting &lt;code&gt;.mrc&lt;/code&gt; to &lt;code&gt;.sog&lt;/code&gt; with&lt;/strong&gt; &lt;code&gt;-md=mrc2sog&lt;/code&gt;. A .mrc volume file can be converted to a .sog volume file in this mode (as depicted in the pipeline figure by a dotted arrow). Again typing &lt;code&gt;voxelcore -md=mrc2sog&lt;/code&gt; prompts the full information abou this mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;voxelcore -md=vol2mesh &amp;lt;input vol fullpath&amp;gt; &amp;lt;output mesh fullpath(w/o extension)&amp;gt; [optional]
optional:
    -onlyBndryVts (only extract the vertices of the voxel boundary. OPTIONAL.) type: bool default: true
    -write2node (write voxel boundary vts to .node file in input file folder. OPTIONAL.) type: bool default: false
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Robust medial axis computation and regularization</title>
      <link>/project/ma/</link>
      <pubDate>Mon, 07 May 2018 18:02:02 -0500</pubDate>
      
      <guid>/project/ma/</guid>
      <description>&lt;p&gt;This project presents a robust medial axis generation pipeline. It consists of two works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Voxel Core: Efficient, robust, and provably good approximation of 3D medial axes. &lt;a href=&#34;/project/voxelcore-readme/&#34; target=&#34;_blank&#34;&gt;See readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Erosion thickness on medial axes of 3D shapes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(details coming soon&amp;hellip;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
